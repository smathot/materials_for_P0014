# Generated by OpenSesame 2.9.4 (Hesitant Heisenberg)
# Thu Apr 09 08:25:12 2015 (nt)
# <http://www.cogsci.nl/opensesame>

set background "gray"
set bidi "no"
set canvas_backend "psycho"
set compensation "0"
set coordinates "relative"
set description "A dual-task variation of the pupil-size and working memory experiment"
set font_bold "no"
set font_family "mono"
set font_italic "no"
set font_size "18"
set foreground "white"
set height "768"
set keyboard_backend "psycho"
set mouse_backend "psycho"
set sampler_backend "legacy"
set start "experiment"
set subject_nr "0"
set subject_parity "even"
set synth_backend "legacy"
set title "P0014.2 [Dual task]"
set transparent_variables "no"
set width "1024"

define keyboard_response attention_keyboard_response
	set allowed_responses "left;right"
	set correct_response "[attProbePos]"
	set flush "yes"
	set timeout "5000"

define sequence attention_sequence
	run attention_trial_run "always"
	run attention_keyboard_response "always"
	run feedback "always"
	run inline_script "always"

define inline_script attention_trial_run
	set _prepare ""
	___run__
	from random import randint
	
	exp.set('acc_backup', self.get('acc'))
	exp.set('total_responses_backup', self.get('total_responses'))
	exp.set('total_correct_backup', self.get('total_correct'))
	exp.set('total_response_time_backup',self.get('total_response_time'))
	exp.set('average_response_time_backup', self.get('average_response_time'))
	exp.set('avg_rt_backup', self.get('avg_rt'))
	exp.set('accuracy_backup', self.get('accuracy'))
	
	# Determine a random pre-attention-probe interval
	preAttProbeDur = randint(0, blankDur-attProbeDur)
	
	stableSleep(postDriftDur, [fixDot], track=False)
	if memCue == 1:
		stableSleep(memDur, [fixDot, memStimTarget], phase='targetStim1')
		stableSleep(postMemDur, [fixDot], phase='postTargetStim1')
		stableSleep(memDur, [fixDot, memStimDist], phase='distStim1')
		stableSleep(postMemDur, [fixDot], phase='postDistStim1')
	else:
		stableSleep(memDur, [fixDot, memStimDist], phase='distStim1')
		stableSleep(postMemDur, [fixDot], phase='postDistStim1')
		stableSleep(memDur, [fixDot, memStimTarget], phase='targetStim1')
		stableSleep(postMemDur, [fixDot], phase='postTargetStim1')	
	stableSleep(cueDur, [cue], phase='cue')
	
	stableSleep(preAttProbeDur, [fixDot, probeStimDist, probeStimTarget],
		phase='preAttProbe')
	if self.get('probePosTarget') == 'left':
		if self.get('attProbePos') == 'left':
			probeStimTarget = maskStimTarget
		else:
			probeStimDist = maskStimDist
	else:
		if self.get('attProbePos') == 'left':
			probeStimDist = maskStimDist
		else:
			probeStimTarget = maskStimTarget
	stableSleep(attProbeDur, [fixDot, probeStimDist, probeStimTarget],
		phase='attProbe')
	stableSleep(10, [fixDot, maskStimDist, maskStimTarget],
		phase='postAttProbe')
	exp.eyelink.log('phase attentionProbe')
	__end__
	set description "Executes Python code"

define feedback block_feedback
	set description "Provides feedback to the participant"
	set duration "keypress"
	set reset_variables "yes"
	draw textline 0 -96 "Einde blok [count_block_sequence] van [total_blocks] (0 = oefenfase)" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 0 "Je accuratesse was [acc]%" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 96 "Druk op een toets om door te gaan ..." center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define loop block_loop
	set break_if "never"
	set column_order "targetLum;probePosTarget;memCue;trialType;attProbePos"
	set cycles "9"
	set description "A single block of trials"
	set item "trial_sequence"
	set order "random"
	set repeat "3"
	setcycle 0 targetLum "bright"
	setcycle 0 trialType "memory"
	setcycle 0 memCue "1"
	setcycle 0 attProbePos "NA"
	setcycle 0 probePosTarget "left"
	setcycle 1 targetLum "bright"
	setcycle 1 trialType "memory"
	setcycle 1 memCue "1"
	setcycle 1 attProbePos "NA"
	setcycle 1 probePosTarget "right"
	setcycle 2 targetLum "bright"
	setcycle 2 trialType "memory"
	setcycle 2 memCue "2"
	setcycle 2 attProbePos "NA"
	setcycle 2 probePosTarget "left"
	setcycle 3 targetLum "bright"
	setcycle 3 trialType "memory"
	setcycle 3 memCue "2"
	setcycle 3 attProbePos "NA"
	setcycle 3 probePosTarget "right"
	setcycle 4 targetLum "dark"
	setcycle 4 trialType "memory"
	setcycle 4 memCue "1"
	setcycle 4 attProbePos "NA"
	setcycle 4 probePosTarget "left"
	setcycle 5 targetLum "dark"
	setcycle 5 trialType "memory"
	setcycle 5 memCue "1"
	setcycle 5 attProbePos "NA"
	setcycle 5 probePosTarget "right"
	setcycle 6 targetLum "dark"
	setcycle 6 trialType "memory"
	setcycle 6 memCue "2"
	setcycle 6 attProbePos "NA"
	setcycle 6 probePosTarget "left"
	setcycle 7 targetLum "dark"
	setcycle 7 trialType "memory"
	setcycle 7 memCue "2"
	setcycle 7 attProbePos "NA"
	setcycle 7 probePosTarget "right"
	setcycle 8 targetLum "=choice(['bright', 'dark'])"
	setcycle 8 trialType "attention"
	setcycle 8 memCue "=randint(1,2)"
	setcycle 8 attProbePos "=choice(['left', 'right'])"
	setcycle 8 probePosTarget "=choice(['left', 'right'])"
	run trial_sequence

define sequence block_sequence
	set description "A sequence containing a single block of trials followed by feedback to the participant"
	set flush_keyboard "yes"
	run reset_feedback "always"
	run block_loop "always"
	run block_feedback "always"

define inline_script colorStim
	set _prepare ""
	___run__
	def colorStimMask():
		
		"""
		Generates a mask of an empty circle.
		
		Returns:
		A 2D numpy array.
		"""
	
		r = colorStimSize/2-1
		m = colorStimThickness
		a = np.empty( (2*r+2, 2*r+2) )	
		a[:] = -1
		x, y = np.ogrid[-r:r+1,-r:r+1]
		i = x**2+y**2 <= r**2
		a[i] = 1	
		x, y = np.ogrid[-r+m:r-m+1,-r+m:r-m+1]
		i = (x-m)**2+(y-m)**2 <= (r-m*2)**2
		a[i] = -1
		a[-r-1:] = np.flipud(a[:r+1])
		a[:,-r-1:] = np.fliplr(a[:,:r+1])
		return a
		
	def colorStim(clrCls, variant=None, pos='center'):
		
		"""
		Generates a color stimulus.
		
		Arguments:
		clrCls		--	The color class, 'red', 'green', or 'blue'.
		
		Keyword arguments:
		variant		--	The color variant number or None for a pure color.
						(default=None)
		pos			--	The stimulus position, which should be 'center', 'up',
						'down', 'right', 'left', or a position tuple.
						(default='center')
		
		Returns:
		A GratingStim.
		"""
		
		assert(clrCls in ['red', 'green', 'blue'])
		assert(variant in range(nColor)+[None])
		assert(pos in ['center', 'up', 'down', 'right', 'left'] or \
			not isinstance(pos, str))
		if pos == 'center':
			xy = 0, 0
		elif pos == 'up':
			xy = 0, vEcc
		elif pos == 'down':
			xy = 0, -vEcc
		elif pos == 'left':
			xy = -hEcc, 0
		elif pos == 'right':
			xy = hEcc, 0
		else:
			xy = pos
		if variant == None:
			color = colorPure[clrCls]
		else:
			color = colorVar[clrCls][variant]
		return visual.GratingStim(win, size=colorStimSize, mask=colorStimMask(),
			tex=None, color=color, pos=xy)
			
	def maskStim(pos='center'):
		
		"""
		Generates a random-noise mask stimulus.
		
		Keyword arguments:
		pos			--	The stimulus position, which should be 'center', 'up',
						'down', 'right', 'left', or a position tuple.
						(default='center')
		
		Returns:
		A GratingStim.
		"""
		
		assert(pos in ['center', 'up', 'down', 'right', 'left'] or \
			not isinstance(pos, str))
		if pos == 'center':
			xy = 0, 0
		elif pos == 'up':
			xy = 0, vEcc
		elif pos == 'down':
			xy = 0, -vEcc
		elif pos == 'left':
			xy = -hEcc, 0
		elif pos == 'right':
			xy = hEcc, 0
		else:
			xy = pos
		return visual.GratingStim(win, size=colorStimSize, mask=colorStimMask(),
			tex=np.random.random((128,128)), pos=xy)		
			
	def showRefArrayStim(clrCls):
		
		"""
		Shows the reference array.
		
		Arguments:
		clrCls		--	The color class, 'red', 'green', or 'blue'.
		"""
		
		baseBgStim.draw()
		stableBgStim.setPos((0,0))
		stableBgStim.draw()
		for clrNr in range(nColor):
			dy = (clrNr+.5-nColor/2.) * colorStimSize * 1.2
			pos = 0, -dy
			colorStim(clrCls, variant=clrNr, pos=pos).draw()
			visual.ImageStim(win, exp.get_file('%d.png' % (clrNr+1)),
				pos=pos).draw()
		win.flip()
	__end__
	set description "Functions for color-related stimuli"

define sketchpad debug_info
	set description "Displays stimuli"
	set duration "keypress"
	draw textline 0 -288 "Debug info" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 0 "[debugInfo]" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -224 "(Enable/ disable in settings item)" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 352 "Press any key to continue ..." center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sketchpad end_of_experiment
	set description "Displays stimuli"
	set duration "keypress"
	draw textline 0 -96 "Het experiment is afgelopen." center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 0 "Bedankt voor je deelname." center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 96 "Druk op een toets om af te sluiten ..." center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sketchpad end_of_practice
	set description "Displays stimuli"
	set duration "keypress"
	draw textline 0 96 "Druk op een toets om door te gaan ..." center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 -96 "De oefenfase is afgelopen." center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 0 "Het echte experiment begint nu." center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define sequence experiment
	set description "The main sequence of the experiment"
	set flush_keyboard "yes"
	run imports "always"
	run settings "always"
	run stableBackground "always"
	run miscStim "always"
	run colorStim "always"
	run eyelink_calibrate "always"
	run instructions "always"
	run practice_loop "always"
	run end_of_practice "always"
	run experimental_loop "always"
	run end_of_experiment "always"

define loop experimental_loop
	set break_if "never"
	set column_order "practice"
	set cycles "1"
	set description "A loop containing one or more experimental blocks"
	set item "block_sequence"
	set order "random"
	set repeat "3"
	setcycle 0 practice "no"
	run block_sequence

define eyelink_calibrate eyelink_calibrate
	set cal_beep "yes"
	set cal_target_size "16"
	set description "Calibration/ initialization plugin for the Eyelink series of eye trackers (SR-Research)"
	set force_drift_correct "yes"
	set sacc_acc_thresh "9500"
	set sacc_vel_thresh "35"
	set tracker_attached "Yes"

define inline_script eyelink_drift_correct
	set _prepare ""
	___run__
	stableSleep(preDriftDur, [fixDot], track=False)
	while not exp.eyelink.drift_correction(fix_triggered=True):
		exp.eyelink.calibrate()
		stableSleep(100, [fixDot], track=False)
	__end__
	set description "Executes Python code"

define eyelink_log eyelink_log
	set auto_log "yes"
	set description "Message log for the Eyelink series of eye trackers (SR-Research)"
	set msg ""
	set throttle "4"

define eyelink_start_recording eyelink_start_recording
	set description "Start recording plugin for the Eyelink series of eye trackers (SR-Research)"
	set log_msg "start_trial [count_trial_sequence]"

define eyelink_stop_recording eyelink_stop_recording

define feedback feedback
	set duration "[feedbackDur]"
	draw textline 0 0 "Dat is correct!" center=1 color="green" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="[correct] = 1"
	draw textline 0 0 "Oeps, dat is niet goed!" center=1 color="red" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="[correct] = 0"

define inline_script imports
	___prepare__
	import numpy as np
	from psychopy import visual
	import random
	__end__
	set _run ""
	set description "Import global modules"

define inline_script inline_script
	set _prepare ""
	___run__
	exp.set('acc', self.get('acc_backup'))
	exp.set('total_responses', self.get('total_responses_backup'))
	exp.set('total_correct', self.get('total_correct_backup'))
	exp.set('total_response_time',self.get('total_response_time_backup'))
	exp.set('average_response_time', self.get('average_response_time_backup'))
	exp.set('avg_rt', self.get('avg_rt_backup'))
	exp.set('accuracy', self.get('accuracy_backup'))
	__end__
	set description "Executes Python code"

define sketchpad instructions
	set description "Displays stimuli"
	set duration "keypress"
	draw textline 0 -96 "Heb je de instructies goed begrepen?" center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 96 "Druk op een toets om door te gaan ..." center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"
	draw textline 0 0 "Zo ja, dan beginnen we met een korte oefenfase." center=1 color="white" font_family="mono" font_size=18 font_bold="no" font_italic="no" html="yes" z_index=0 show_if="always"

define logger logger
	set description "Logs experimental data"

define keyboard_response memory_keyboard_response
	set allowed_responses "1;2;3"
	set description "Collects keyboard responses"
	set flush "yes"
	set timeout "infinite"

define sequence memory_sequence
	run memory_trial_run "always"
	run memory_keyboard_response "always"
	run memory_trial_feedback "always"

define inline_script memory_trial_feedback
	set _prepare ""
	___run__
	feedbackDot = feedbackDotStim(self.get('correct'))
	stableSleep(feedbackDur, [feedbackDot], track=False, phase='feedback')
	__end__
	set description "Executes Python code"

define inline_script memory_trial_run
	set _prepare ""
	___run__
	stableSleep(postDriftDur, [fixDot], track=False)
	
	if memCue == 1:
		stableSleep(memDur, [fixDot, memStimTarget], phase='targetStim1')
		stableSleep(postMemDur, [fixDot], phase='postTargetStim1')
		stableSleep(memDur, [fixDot, memStimDist], phase='distStim1')
		stableSleep(postMemDur, [fixDot], phase='postDistStim1')
	else:
		stableSleep(memDur, [fixDot, memStimDist], phase='distStim1')
		stableSleep(postMemDur, [fixDot], phase='postDistStim1')
		stableSleep(memDur, [fixDot, memStimTarget], phase='targetStim1')
		stableSleep(postMemDur, [fixDot], phase='postTargetStim1')	
	stableSleep(cueDur, [cue], phase='cue')
	stableSleep(blankDur, [fixDot, probeStimDist, probeStimTarget],
		phase='retention')
	showRefArrayStim(clrClsTarget)
	exp.eyelink.log('phase memoryProbe')
	__end__
	set description "Executes Python code"

define inline_script miscStim
	set _prepare ""
	___run__
	def charStim(ch):
		
		"""
		Generates a character.
		
		Arguments:
		ch		--	The character.
		
		Returns:
		An ImageStim.
		"""
		
		return visual.ImageStim(win, exp.get_file('%s.png' % ch))
		
	def fixDotStim():
		
		"""
		Generates a fixation dot.
		
		Returns:
		An ImageStim.
		"""
		
		return visual.ImageStim(win, exp.get_file('cross.png'))
		
		
	def feedbackDotStim(correct):
		
		"""
		Generates a colored dot for immediate feedback.
		
		Arguments:
		correct		--	The correctness, 1 or 0.
		
		Returns:
		A GratingStim
		"""
		
		assert(correct in [0,1])
		if correct == 0:
			color = 'red'
		else:
			color = 'green'
		return visual.GratingStim(win, mask='circle', tex=None, color=color,
			size=feedbackDotSize)
	__end__
	set description "Functions for various stimuli"

define loop practice_loop
	set break_if "never"
	set column_order "practice"
	set cycles "1"
	set description "Repeatedly runs another item"
	set item "block_sequence"
	set order "random"
	set repeat "1"
	setcycle 0 practice "yes"
	run block_sequence

define reset_feedback reset_feedback

define inline_script settings
	___prepare__
	# Enable/ disable debug info
	exp.set('_debug', 'no')
	
	# Size and line thickness of the stimuli
	colorStimSize = 128
	colorStimThickness = 12
	# Size of feedback dots
	feedbackDotSize = 16
	# Horizontal and vertical eccentricity of stimuli
	w, h = exp.resolution()
	vEcc = 92
	hEcc = w/4
	total_blocks = 3
	# Various durations, see `trial_*` scripts
	preDriftDur = 995
	postDriftDur = 995
	memDur = 995
	postMemDur = 1495
	cueDur = 995
	blankDur = 4995
	feedbackDur = 495
	# Duration of the attention probe, i.e. the lead time of the first masked
	# stimulus, which is the target
	attProbeDur = 70
	
	# The number of variants that are used on a given trial
	nColor = 3
	# Pure colors
	colorPure = {
		'green' : '#008600',
		'red' : '#e80000',
		'blue' : '#4f65ff'
		}
	# Color variations
	colorVar = {
		'green' : [
			'#5c8600',
			'#6ea207',
			'#99ee00',
			'#00bb55',
			'#22942d',
			'#00ee11'
			],
		'red' : [
			'#e92424',
			'#d00202',
			'#f24550',
			'#e43c33',
			'#fd1e40',
			'#ff0022'
			],
		'blue' : [
			'#33ffdd',
			'#00bbff',
			'#0088ff',
			'#00d0e1',
			'#00aabb',
			'#0088bb'
			]
		}
	
	# Set relevant variables so that they can be used in the GUI
	exp.set('total_blocks', total_blocks)
	exp.set('feedbackDur', feedbackDur)
	__end__
	set _run ""
	set description "Experimental settings"

define inline_script stableBackground
	___prepare__
	def stableSleep(dur, stimList, track=True, phase=None):
		
		"""
		Sleeps for a prespecified duration, while the background is stabilized based
		on horizontal gaze position.
		
		Arguments:
		dur			--	The duration.
		stimList	--	A list of stimuli to present.
		
		Keyword arguments:
		track		--	Indicates whether gaze position should be tracked.
						(default=True)
		phase		--	Indicates the name of the trace phase. (default=None)
		"""
		
		start_time = self.time()
		i = 0
		while self.time() - start_time < dur:
			if track:
				x, y = exp.eyelink.sample()
				x -= w/2
				if abs(x) > w/6:
					x = 0
					exp.eyelink.log('stabilize error')
				else:				
					exp.eyelink.log('stabilize %f' % x)
			else:
				x, y = 0, 0		
			baseBgStim.draw()
			stableBgStim.setPos((x, 0))
			stableBgStim.draw()
			for stim in stimList:
				stim.draw()
			win.flip()
			if i == 0 and phase != None:
				exp.eyelink.log('phase %s' % phase)
			i += 1
		
	def initBackground(leftLum):
		
		"""
		Initializes the background stimuli.
		
		Arguments:
		leftLum	--	Indicates whether the left side is 'bright' or 'dark'
		"""
		
		global baseBgStim, stableBgStim
		assert(leftLum in ['bright', 'dark'])
		# Create background texture. The background texture is half bright and half
		# dark. The center gradient is implemented by the gradient texture.
		backgroundTex = np.empty( [1, w], dtype=float )
		backgroundTex[0,:w/2] = -1
		backgroundTex[0,w/2:] = 1
		if leftLum == 'dark':
			backgroundTex *= -1
		baseBgStim = visual.GratingStim(win, size=(w,h), tex=backgroundTex,
			mask=None)	
		# Create the gradient texture. This is 1/3 rd of the display width, and is
		# anchored to the point of gaze.
		gradientTex = np.empty( [1, w/3], dtype=float )
		gradientTex[0] = np.linspace(-1, 1, w/3)
		if leftLum == 'dark':
			gradientTex = gradientTex * -1
		stableBgStim = visual.GratingStim(win, size=(w/3,h), tex=gradientTex,
			mask=None)
	__end__
	set _run ""
	set description "Functions for background rendering"

define inline_script trial_prepare
	___prepare__
	# Trial variables
	memCue = self.get('memCue')
	targetLum = self.get('targetLum')
	probePosTarget = self.get('probePosTarget')
	trialType = self.get('trialType')
	
	# Randomly select colors
	colorList = colorPure.keys()
	random.shuffle(colorList)
	clrClsTarget = colorList[0]
	random.shuffle(colorVar[clrClsTarget])
	clrNrTarget = random.randint(0, nColor-1)
	clrClsDist = colorList[1]
	random.shuffle(colorVar[clrClsDist])
	clrNrDist = random.randint(0, nColor-1)
	
	# Set debug info string. This is shown if _debug is set to 'yes' in the settings
	# item.
	debugInfo = ('Target = %s (%d +1 cr)<br />'
		'Choices = %s<br />'
		'Distractor = %s (%d)<br />'
		'memCue = %d') % (colorVar[clrClsTarget][clrNrTarget],
		clrNrTarget, colorVar[clrClsTarget][:nColor],
		colorVar[clrClsDist][clrNrDist], clrNrDist, memCue)
	exp.set('debugInfo', debugInfo)
	
	# Recode other variables that follow from trial variables
	if probePosTarget == 'left':
		probePosDist = 'right'
	else:
		probePosDist = 'left'
	
	if targetLum == 'bright':
		if probePosDist == 'left':
			leftLum = 'bright'
		else:
			leftLum = 'dark'
	else:
		if probePosDist == 'left':
			leftLum = 'dark'
		else:
			leftLum = 'bright'
			
	# Assert for correctness
	assert(probePosTarget in ['left', 'right'])
	assert(probePosDist in ['left', 'right'])
	assert(memCue in [1, 2])
	assert(targetLum in ['bright', 'dark'])
	assert(leftLum in ['bright', 'dark'])
	assert(clrClsTarget in colorList)
	assert(clrClsDist in colorList)
	assert(clrNrTarget in range(nColor))
	assert(clrNrDist in range(nColor))
	assert(trialType in ['memory', 'attention'])
	
	# Initialize stimuli
	cue = charStim(memCue)
	fixDot = fixDotStim()
	memStimTarget = colorStim(clrClsTarget, variant=clrNrTarget)
	memStimDist = colorStim(clrClsDist, variant=clrNrDist)
	probeStimTarget = colorStim(clrClsTarget, pos=probePosTarget)
	probeStimDist = colorStim(clrClsDist, pos=probePosDist)
	maskStimDist = maskStim(pos=probePosDist)
	maskStimTarget = maskStim(pos=probePosTarget)
	initBackground(leftLum)
	
	# Set experimental variables that have been determined online
	exp.set('clrClsTarget', clrClsTarget)
	exp.set('clrNrTarget', clrNrTarget)
	exp.set('clrClsDist', clrClsDist)
	exp.set('clrNrDist', clrNrDist)
	exp.set('probePostDist', probePosDist)
	exp.set('leftLum', leftLum)
	exp.set('correct_response', clrNrTarget+1)
	__end__
	set _run ""
	set description "Executes Python code"

define sequence trial_sequence
	set description "A single trial"
	set flush_keyboard "yes"
	run trial_prepare "always"
	run debug_info "[_debug] = yes"
	run eyelink_drift_correct "always"
	run eyelink_start_recording "always"
	run memory_sequence "[trialType] = memory"
	run attention_sequence "[trialType] = attention"
	run logger "always"
	run eyelink_log "always"
	run eyelink_stop_recording "always"

