# Generated by OpenSesame 2.8.2~pre2 (Gutsy Gibson)
# Mon Apr 28 18:26:46 2014 (posix)
# <http://www.cogsci.nl/opensesame>

set mouse_backend "psycho"
set subject_parity "even"
set height "768"
set font_family "mono"
set font_italic "no"
set synth_backend "legacy"
set title "P0014.1 [Pupil size and working memory]"
set coordinates "relative"
set start "experiment"
set sampler_backend "legacy"
set transparent_variables "no"
set foreground "white"
set font_bold "no"
set description "A template containing a practice and an experimental phase"
set background "black"
set font_size "18"
set keyboard_backend "psycho"
set canvas_backend "psycho"
set compensation "0"
set bidi "no"
set subject_nr "0"
set width "1024"

define loop block_loop
	set repeat "1"
	set description "A single block of trials"
	set item "trial_sequence"
	set column_order ""
	set cycles "1"
	set order "random"
	run trial_sequence

define sequence block_sequence
	set flush_keyboard "yes"
	set description "A sequence containing a single block of trials followed by feedback to the participant"
	run reset_feedback "always"
	run block_loop "always"

define inline_script colorStim
	___run__
	def colorStimMask():
		
		"""
		Generates a mask of an empty circle.
		
		Returns:
		A 2D numpy array.
		"""
	
		r = colorStimSize/2-1
		m = colorStimThickness
		a = np.empty( (2*r+2, 2*r+2) )	
		a[:] = -1
		x, y = np.ogrid[-r:r+1,-r:r+1]
		i = x**2+y**2 <= r**2
		a[i] = 1	
		x, y = np.ogrid[-r+m:r-m+1,-r+m:r-m+1]
		i = (x-m)**2+(y-m)**2 <= (r-m*2)**2
		a[i] = -1
		a[-r-1:] = np.flipud(a[:r+1])
		a[:,-r-1:] = np.fliplr(a[:,:r+1])
		return a
		
	def colorStim(clrCls, clrNr, pos):
		
		"""
		Generates a color stimulus.
		
		Arguments:
		clrCls		--	The color class, 'red', 'green', or 'blue'.
		clrNr		--	The color number.
		
		Returns:
		A GratingStim.
		"""
		
		assert(clrCls in ['red', 'green', 'blue'])
		assert(clrNr in range(5))
		assert(pos in ['up', 'down', 'right', 'left'] or not isinstance(pos, str))
		if pos == 'up':
			xy = 0, vEcc
		elif pos == 'down':
			xy = 0, -vEcc
		elif pos == 'left':
			xy = -hEcc, 0
		elif pos == 'right':
			xy = hEcc, 0
		else:
			xy = pos
		return visual.GratingStim(win, size=colorStimSize, mask=colorStimMask(),
			tex=None, color=colors[clrCls][clrNr], pos=xy, colorSpace='hsv')
			
	def showRefArrayStim(clrCls):
		
		"""
		Shows the reference array.
		
		Arguments:
		clrCls		--	The color class, 'red', 'green', or 'blue'.
		"""
		
		baseBgStim.draw()
		stableBgStim.setPos((0,0))
		stableBgStim.draw()
		for clrNr in range(1, nClr+1):
			dx = (clrNr-.5-nClr/2) * colorStimSize * 1.5
			colorStim(clrCls, clrNr, pos=(dx, 0)).draw()
			visual.TextStim(win, text=clrNr, pos=(dx, 0), color=textColor).draw()
		win.flip()
	__end__
	set _prepare ""
	set description "Executes Python code"

define sequence experiment
	set flush_keyboard "yes"
	set description "The main sequence of the experiment"
	run imports "always"
	run settings "always"
	run stableBackground "always"
	run miscStim "always"
	run colorStim "always"
	run experimental_loop "always"

define loop experimental_loop
	set repeat "1"
	set description "A loop containing one or more experimental blocks"
	set item "block_sequence"
	set column_order "practice"
	set cycles "1"
	set order "random"
	setcycle 0 practice "no"
	run block_sequence

define inline_script imports
	set _run ""
	___prepare__
	import numpy as np
	from psychopy import visual
	__end__
	set description "Executes Python code"

define keyboard_response keyboard_response
	set description "Collects keyboard responses"
	set timeout "infinite"
	set flush "yes"

define logger logger
	set description "Logs experimental data"

define inline_script miscStim
	___run__
	def arrowStim(_dir):
		
		"""
		Generates an arrow. The arrow is a small text-based triangle.
		
		Arguments:
		_dir	--	The arrows direction, which should be 'up' or 'down'.
		
		Returns:
		A GratingStim.
		"""
		
		assert(_dir in ['up', 'down'])
		if _dir == 'up':
			ch = u'U+005Cu25B2'
		else:
			ch = u'U+005Cu25BC'
		return visual.TextStim(win, text=ch, rgb=arrowColor)
		
	def fixDotStim():
		
		"""
		Generates a fixation dot.
		
		Returns:
		A GratingStim.
		"""
		
		return visual.GratingStim(win, mask='raisedCos', tex=None, size=fixDotSize,
			color=fixDotColor)
	__end__
	set _prepare ""
	set description "Executes Python code"

define inline_script phase_memorize
	___run__
	stableSleep(1000, [memStimTarget, memStimDist, cue])
	stableSleep(1000, [fixDot])
	stableSleep(1000, [fixDot, probeStimDist, probeStimTarget])
	showRefArrayStim(clrClsTarget)
	__end__
	___prepare__
	import numpy as np
	from psychopy import visual
	
	
	memPosTarget = 'up'
	memPosDist = 'down'
	
	leftLum = 'bright'
	
	probePosTarget = 'left'
	probePosDist = 'right'
			
	clrClsTarget = 'red'
	clrNrTarget = 1
	clrClsDist = 'blue'
	clrNrDist = 2
	
	cue = arrowStim(memPosTarget)
	fixDot = fixDotStim()
	
	memStimTarget = colorStim(clrClsTarget, clrNrTarget, pos=memPosTarget)
	memStimDist = colorStim(clrClsDist, clrNrDist, pos=memPosDist)
	
	probeStimTarget = colorStim(clrClsTarget, 0, pos=probePosTarget)
	probeStimDist = colorStim(clrClsDist, 0, pos=probePosDist)
	
	initBackground(leftLum)
	__end__
	set description "Executes Python code"

define reset_feedback reset_feedback

define inline_script settings
	set _run ""
	___prepare__
	colors = {
		'red' : [
			(0, 1, 1),
			(-20, 1, 1),
			(-10, 1, 1),
			(10, 1, 1),
			(20, 1, 1),
			],
		'green' : [
			(120, 1, 1),
			(100, 1, 1),
			(110, 1, 1),
			(130, 1, 1),
			(140, 1, 1),
			],
		'blue' : [
			(240, 1, 1),
			(220, 1, 1),
			(230, 1, 1),
			(250, 1, 1),
			(260, 1, 1),
			]
		}
	
	nClr = 4
	colorStimSize = 128
	colorStimThickness = 12
	arrowColor = 1,1,1
	fixDotSize = 16
	fixDotColor = 1,1,1
	textColor = 1,1,1
	w, h = exp.resolution()
	
	vEcc = 92
	hEcc = w/4
	__end__
	set description "Executes Python code"

define inline_script stableBackground
	set _run ""
	___prepare__
	def stableSleep(dur, stimList):
		
		"""
		Sleeps for a prespecified duration, while the background is stabilized based
		on horizontal gaze position.
		
		Arguments:
		dur			--	The duration.
		stimList	--	A list of stimuli to present.
		"""
		
		start_time = self.time()
		while self.time() - start_time < dur:
			x, y = np.random.randint(-10, 10), 0	
			baseBgStim.draw()
			stableBgStim.setPos((x, 0))
			stableBgStim.draw()
			for stim in stimList:
				stim.draw()
			win.flip()
		
	def initBackground(leftLum):
		
		"""
		Initializes the background stimuli.
		
		Arguments:
		leftLum	--	Indicates whether the left side is 'bright' or 'dark'
		"""
		
		global baseBgStim, stableBgStim
		assert(leftLum in ['bright', 'dark'])
		# Create background texture. The background texture is half bright and half
		# dark. The center gradient is implemented by the gradient texture.
		backgroundTex = np.empty( [1, w], dtype=float )
		backgroundTex[0,:w/2] = -1
		backgroundTex[0,w/2:] = 1
		if leftLum == 'dark':
			backgroundTex *= -1
		baseBgStim = visual.GratingStim(win, size=(w,h), tex=backgroundTex,
			mask=None)	
		# Create the gradient texture. This is 1/3 rd of the display width, and is
		# anchored to the point of gaze.
		gradientTex = np.empty( [1, w/3], dtype=float )
		gradientTex[0] = np.linspace(-1, 1, w/3)
		if leftLum == 'dark':
			gradientTex = gradientTex * -1
		stableBgStim = visual.GratingStim(win, size=(w/3,h), tex=gradientTex,
			mask=None)
	__end__
	set description "stabilizer"

define sequence trial_sequence
	set flush_keyboard "yes"
	set description "A single trial"
	run phase_memorize "always"
	run keyboard_response "always"
	run logger "always"

